{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","newStatus","newString","defaultState","query","status","All","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","length","className","map","id","title","completed","onClick","curTodoActions","eyeButtonClick","classNames","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","Object","entries","key","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoad","setIsLoad","useEffect","a","userId","fetchedUser","href","email","name","getValidStr","str","trim","toLowerCase","App","fetchedTodos","todosActions","isTextMatch","includes","Active","Completed","filtredTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13e82c15.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatus = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\nconst setStatus = (newStatus: Status): SetStatus => ({\n  type: 'filter/SET_STATUS',\n  payload: newStatus,\n});\n\ntype RemoveStatus = {\n  type: 'filter/REMOVE_STATUS';\n};\n\nconst removeStatus = (): RemoveStatus => ({\n  type: 'filter/REMOVE_STATUS',\n});\n\ntype ChangeQuery = {\n  type: 'filter/CHANGE_QUERY';\n  payload: string;\n};\n\nconst changeQuery = (newString: string): ChangeQuery => ({\n  type: 'filter/CHANGE_QUERY',\n  payload: newString,\n});\n\ntype ClearQuery = {\n  type: 'filter/CLEAR_QUERY';\n};\n\nconst clearQuery = (): ClearQuery => ({\n  type: 'filter/CLEAR_QUERY',\n});\n\nexport const actions = {\n  setStatus,\n  removeStatus,\n  changeQuery,\n  clearQuery,\n};\n\ntype State = { query: string, status: Status };\ntype Action = SetStatus | RemoveStatus | ChangeQuery | ClearQuery;\n\nconst defaultState: State = {\n  query: '',\n  status: Status.All,\n};\n\nconst filterReducer = (\n  state: State = defaultState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    case 'filter/REMOVE_STATUS':\n      return {\n        ...state,\n        status: Status.All,\n      };\n    case 'filter/CHANGE_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filter/CLEAR_QUERY':\n      return {\n        ...state,\n        query: '',\n      };\n    default:\n      return defaultState;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'todos/SET', payload: Todo[] };\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as curTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const currentTodo = useAppSelector(store => store.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const eyeButtonClick = (todo: Todo) => {\n    if (todo.id === currentTodo?.id) {\n      dispatch(curTodoActions.removeTodo());\n\n      return;\n    }\n\n    dispatch(curTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {todos.length ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map((todo) => {\n              const { id, title, completed } = todo;\n\n              return (\n                <tr data-cy=\"todo\" key={id}>\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed ? (\n                      <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>\n                    ) : ' '}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={completed ? 'has-text-success' : 'has-text-danger'}>{title}</p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => eyeButtonClick(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i className={classNames('far', {\n                          'fa-eye': currentTodo?.id !== id,\n                          'fa-eye-slash': currentTodo?.id === id,\n                        })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector(store => store.filter);\n  const dispatch = useAppDispatch();\n\n  const changeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.changeQuery(event.target.value));\n  };\n\n  const changeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={changeStatus}\n          >\n            {Object.entries(Status).map(([key, value]) => (\n              <option value={value} key={key}>{key}</option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={changeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.clearQuery())}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as curTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(store => store.currentTodo);\n  const dispatch = useAppDispatch();\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoad, setIsLoad] = useState(true);\n\n  useEffect(() => {\n    setIsLoad(true);\n    (async () => {\n      try {\n        if (currentTodo) {\n          const fetchedUser = await getUser(currentTodo.userId);\n\n          setUser(fetchedUser);\n        }\n      } finally {\n        setIsLoad(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isLoad ? <Loader /> : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(curTodoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { Status } from './types/Status';\n\nconst getValidStr = (str: string) => {\n  return str.trim().toLowerCase();\n};\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { todos, currentTodo, filter } = useAppSelector(store => store);\n  const [isLoad, setIsLoad] = useState(true);\n\n  const filtredTodos = () => {\n    const { status, query } = filter;\n\n    if (status === Status.All && !getValidStr(query)) {\n      return todos;\n    }\n\n    return todos.filter(todo => {\n      const isTextMatch = getValidStr(todo.title).includes(getValidStr(query));\n\n      if (status === Status.Active) {\n        return !todo.completed && isTextMatch;\n      }\n\n      if (status === Status.Completed) {\n        return todo.completed && isTextMatch;\n      }\n\n      return isTextMatch;\n    });\n  };\n\n  useEffect(() => {\n    (async () => {\n      setIsLoad(true);\n      try {\n        const fetchedTodos = await getTodos();\n\n        dispatch(todosActions.setTodos(fetchedTodos));\n      } finally {\n        setIsLoad(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoad ? <Loader /> : <TodoList todos={filtredTodos()} />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}